/* Generated by Together */
#ifndef TASK_H
#define TASK_H

#include "OrderedTaskPoint.hpp"
#include "StartPoint.hpp"
#include <list>
#include <vector>

class Task {
public:
  Task();
  ~Task();

  std::vector<OrderedTaskPoint*> tps;
  std::vector<TaskLeg*> legs;

  OrderedTaskPoint* getActiveTaskPoint();
  unsigned getActiveTaskPointIndex();

  void insert(OrderedTaskPoint*, unsigned position);
  void remove(unsigned position);

  void setActiveTaskPoint(unsigned);    

  virtual bool update_sample(const AIRCRAFT_STATE &, const AIRCRAFT_STATE&);

  double get_distance_nominal() const {
    return distance_nominal;
  };
  double get_distance_min() const {
    return distance_min;
  };
  double get_distance_max() const {
    return distance_max;
  };
  double get_distance_remaining() const {
    return distance_remaining;
  };
  double get_distance_travelled() const {
    return distance_travelled;
  };
  double get_distance_scored() const {
    return distance_scored;
  };
  void report(const GEOPOINT &location);

private:
  double distance_nominal;
  double distance_min;
  double distance_max;
  double distance_remaining;
  double distance_travelled;
  double distance_scored;
  virtual void scan_distance(const GEOPOINT &location, bool full);
  void update_geometry();
  StartPoint *ts;
  unsigned activeTaskPoint;
};

#endif //TASK_H
