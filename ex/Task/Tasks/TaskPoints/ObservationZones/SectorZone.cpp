/* Generated by Together */

#include "SectorZone.hpp"
#include "Util.h"

GEOPOINT SectorZone::get_boundary_parametric(double t) 
{ 
  AIRCRAFT_STATE state;
  state.Location = ::FindLocation(getLocation(),t*360,Radius*0.999);

  if (isInSector(state)) {
    return state.Location;
  } else {
    return getLocation();
  }
}

double SectorZone::score_adjustment()
{
  return 0.0;
}

void 
SectorZone::updateSector() 
{
  SectorStart = FindLocation(Location, Radius, StartRadial);
  SectorEnd = FindLocation(Location, Radius, EndRadial);
}


bool 
SectorZone::isInSector(const AIRCRAFT_STATE &ref) const
{
  if (!CylinderZone::isInSector(ref)) {
    return false;
  } else {
    return angleInSector(bearing(ref.Location));
  }
}

void 
SectorZone::setStartRadial(double x) 
{
  StartRadial = x;
  updateSector();
}

void 
SectorZone::setEndRadial(double x) 
{
  EndRadial = x;
  updateSector();
}  

bool 
SectorZone::angleInSector(double b) const
{
  if (StartRadial<EndRadial) {
    return ((b<=EndRadial) && (b>=StartRadial));
  } else {
    return ((b<=EndRadial) || (b>=StartRadial));
  }
}
