/* Generated by Together */

#include "CylinderZone.hpp"
#include "Navigation/Geometry/GeoVector.hpp"
#include <stdlib.h>

double CylinderZone::score_adjustment()
{
  return Radius;
}

GEOPOINT CylinderZone::get_boundary_parametric(double t) const
{ 
  return GeoVector(Radius, t*360).end_point(getLocation());
}

bool
CylinderZone::equals(const ObservationZonePoint* other) const
{
  if (ObservationZonePoint::equals(other)) {
    if (const CylinderZone* z = dynamic_cast<const CylinderZone*>(other)) {
      return Radius == z->getRadius();
    }
  }
  return false;
}

GEOPOINT
CylinderZone::randomPointInSector() const
{
  AIRCRAFT_STATE ac;  
  do {

    double dir = rand()%360;
    double dis = (rand()%100)/100.0*Radius;
    GeoVector vec(dis,dir);
    ac.Location = vec.end_point(Location);
  } while (!isInSector(ac));
  return ac.Location;
}
