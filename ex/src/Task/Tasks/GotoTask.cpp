/* Generated by Together */

#include "GotoTask.hpp"
#include "BaseTask/TaskPoint.hpp"
#include <stdlib.h>
#include "Task/Visitors/TaskPointVisitor.hpp"

GotoTask::GotoTask(const TaskEvents &te, 
                   const TaskBehaviour &tb,
                   TaskAdvance &ta,
                   GlidePolar &gp): 
  AbstractTask(te,tb,ta,gp),
  tp(NULL) 
{
}

GotoTask::~GotoTask() 
{
  if (tp) {
    delete tp;
  }
}

TaskPoint* 
GotoTask::getActiveTaskPoint() const
{ 
  return tp;
}

void 
GotoTask::setActiveTaskPoint(unsigned index)
{
  // nothing to do
}


bool 
GotoTask::update_sample(const AIRCRAFT_STATE &state,
                        const bool full_update)
{
  return false; // nothing to do
}


bool 
GotoTask::check_transitions(const AIRCRAFT_STATE &, const AIRCRAFT_STATE&)
{
  return false; // nothing to do
}

void 
GotoTask::do_goto(const Waypoint & wp)
{
  if (tp) {
    delete tp;
  }
  tp = new TaskPoint(wp, task_behaviour);
}

void 
GotoTask::Accept(TaskPointVisitor& visitor) const
{
  if (tp) {
    tp->Accept(visitor);
  }
}

unsigned 
GotoTask::task_size() const
{
  if (tp) {
    return 1;
  } else {
    return 0;
  }
}

