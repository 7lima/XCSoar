/* Generated by Together */

#include "AbstractTask.hpp"
#include "Navigation/Aircraft.hpp"
#include "BaseTask/TaskPoint.hpp"
#include "TaskSolvers/TaskBestMc.hpp"
#include "TaskSolvers/TaskGlideRequired.hpp"
#include "Util/Gradient.hpp"

bool 
AbstractTask::update_idle(const AIRCRAFT_STATE &state)
{
  bool retval = false;
  if (task_started() && task_behaviour.auto_mc) {
    double mc_found = calc_mc_best(state);
    if (trigger_auto || (mc_found > stats.mc_best)) {
      trigger_auto = true;
      stats.mc_best = mc_lpf.update(mc_found);
      glide_polar.set_mc(stats.mc_best);
    } else {
      stats.mc_best = mc_lpf.reset(glide_polar.get_mc());
    }

    retval = true;
  } else {
    trigger_auto = false;
    stats.mc_best = mc_lpf.reset(glide_polar.get_mc());
  }
  if (task_started() && task_behaviour.calc_cruise_efficiency) {
    stats.cruise_efficiency = ce_lpf.update(calc_cruise_efficiency(state));
    retval = true;
  } else {
    stats.cruise_efficiency = ce_lpf.reset(1.0);
  }

  return false;
}


unsigned 
AbstractTask::getActiveTaskPointIndex() const
{
  return activeTaskPoint;
}

void
AbstractTask::update_stats_distances(const GEOPOINT &location,
                                     const bool full_update)
{

  stats.total.remaining.set_distance(scan_distance_remaining(location));

  if (full_update) {
    stats.distance_nominal = scan_distance_nominal();
  }

  scan_distance_minmax(location, 
                       full_update,
                       &stats.distance_min,
                       &stats.distance_max);

  stats.total.travelled.set_distance(scan_distance_travelled(location));
  stats.total.planned.set_distance(scan_distance_planned());

  stats.distance_scored = scan_distance_scored(location);

}

void
AbstractTask::update_glide_solutions(const AIRCRAFT_STATE &state)
{
  glide_solution_remaining(state, 
                           stats.total.solution_remaining,
                           stats.current_leg.solution_remaining);

  glide_solution_travelled(state, 
                           stats.total.solution_travelled,
                           stats.current_leg.solution_travelled);

  glide_solution_planned(state, 
                         stats.total.solution_planned,
                         stats.current_leg.solution_planned,
                         stats.total.remaining_effective,
                         stats.current_leg.remaining_effective,
                         stats.total.solution_remaining.TimeElapsed,
                         stats.current_leg.solution_remaining.TimeElapsed);

  stats.current_leg.remaining.set_distance(
    stats.current_leg.solution_remaining.Vector.Distance);
  stats.current_leg.travelled.set_distance(
    stats.current_leg.solution_travelled.Vector.Distance);
  stats.current_leg.planned.set_distance(
    stats.current_leg.solution_planned.Vector.Distance);

  stats.total.gradient = ::AngleToGradient(calc_gradient(state));
  stats.current_leg.gradient = ::AngleToGradient(leg_gradient(state));
}

bool
AbstractTask::update(const AIRCRAFT_STATE &state, 
                     const AIRCRAFT_STATE &state_last)
{
  bool retval;

  const bool full_update = check_transitions(state, state_last);

  update_stats_times(state);

  update_stats_distances(state.Location, full_update);

  update_glide_solutions(state);

  retval = update_sample(state, full_update);

  update_stats_glide(state);

  update_stats_speeds(state, state_last);

  return retval;
}

void
AbstractTask::update_stats_speeds(const AIRCRAFT_STATE &state, 
                                  const AIRCRAFT_STATE &state_last)
{
  const double dt = state.Time-state_last.Time;
  if (!task_finished()) {
    if (task_started()) {
      stats.total.calc_speeds(dt);
      stats.current_leg.calc_speeds(dt);
    } else {
      stats.total.reset();
      stats.current_leg.reset();
    }
  }
}

void
AbstractTask::update_stats_glide(const AIRCRAFT_STATE &state)
{
  stats.glide_required = AngleToGradient(calc_glide_required(state));
}

void
AbstractTask::update_stats_times(const AIRCRAFT_STATE &state)
{
  // default for tasks with no start time...
  stats.Time = state.Time;
  if (!task_finished()) {
    stats.total.set_times(scan_total_start_time(state), state);
    stats.current_leg.set_times(scan_leg_start_time(state),state);
  }
}


void 
AbstractTask::scan_distance_minmax(const GEOPOINT &location, bool full,
                                    double *dmin, double *dmax)
{
  *dmin = stats.total.remaining.get_distance();
  *dmax = stats.total.remaining.get_distance();
}

double 
AbstractTask::scan_distance_nominal()
{
  return stats.total.remaining.get_distance();
}

double 
AbstractTask::scan_distance_planned()
{
  return stats.total.remaining.get_distance();
}

double 
AbstractTask::scan_distance_scored(const GEOPOINT &location)
{
  return 0.0;
}

double 
AbstractTask::scan_distance_travelled(const GEOPOINT &location)
{
  return 0.0;
}

double 
AbstractTask::scan_distance_remaining(const GEOPOINT &location)
{
  TaskPoint *tp = getActiveTaskPoint();
  if (!tp) {
    return 0.0;
  }
  return tp->distance(location);
}


void
AbstractTask::glide_solution_remaining(const AIRCRAFT_STATE &state, 
                                       GlideResult &total,
                                       GlideResult &leg)
{
  GlideResult res;

  TaskPoint* tp = getActiveTaskPoint();
  if (tp) {
    res = tp->glide_solution_remaining(state, glide_polar, 0.0);
    res.calc_cruise_bearing();
  }
  total = res;
  leg = res;
}

void 
AbstractTask::glide_solution_travelled(const AIRCRAFT_STATE &state, 
                                       GlideResult &total,
                                       GlideResult &leg)
{
  GlideResult null_res;
  total = null_res;
  leg = null_res;
}

void 
AbstractTask::glide_solution_planned(const AIRCRAFT_STATE &state, 
                                     GlideResult &total,
                                     GlideResult &leg,
                                     DistanceRemainingStat &total_remaining_effective,
                                     DistanceRemainingStat &leg_remaining_effective,
                                     const double total_t_elapsed,
                                     const double leg_t_elapsed)
{
  GlideResult res = stats.total.solution_remaining;
  total = res;
  leg = res;
  total_remaining_effective.set_distance(res.Vector.Distance);
  leg_remaining_effective.set_distance(res.Vector.Distance);
}


double 
AbstractTask::scan_total_start_time(const AIRCRAFT_STATE &state)
{
  return state.Time;
}

double 
AbstractTask::scan_leg_start_time(const AIRCRAFT_STATE &state)
{
  return state.Time;
}

double 
AbstractTask::calc_mc_best(const AIRCRAFT_STATE &aircraft)
{
  TaskPoint *tp = getActiveTaskPoint();
  if (!tp) {
    return glide_polar.get_mc();
  }
  TaskBestMc bmc(tp, aircraft, glide_polar);
  return bmc.search(glide_polar.get_mc());
}

double 
AbstractTask::calc_glide_required(const AIRCRAFT_STATE &aircraft)
{
  TaskPoint *tp = getActiveTaskPoint();
  if (!tp) {
    return 0.0;
  }
  TaskGlideRequired bgr(tp, aircraft, glide_polar);
  return bgr.search(0.0);
}


double
AbstractTask::leg_gradient(const AIRCRAFT_STATE &aircraft) 
{
  TaskPoint *tp = getActiveTaskPoint();
  if (!tp) {
    return 0.0;
  }
  const double d = tp->get_vector_remaining(aircraft).Distance;
  if (d) {
    return (aircraft.Altitude-tp->getElevation())/d;
  } else {
    return 0.0;
  }
}

double 
AbstractTask::calc_gradient(const AIRCRAFT_STATE &state) 
{
  return leg_gradient(state);
}

void 
AbstractTask::reset()
{
  trigger_auto = false;
}

