/* Generated by Together */

#include "StartPoint.hpp"
#include <assert.h>

StartPoint::StartPoint(const TaskProjection& tp,
                       const Waypoint & wp,
                       const TaskBehaviour& tb) : 
  OrderedTaskPoint(tp,wp,tb,false), 
  enabled(true) 
{
}

bool 
StartPoint::transition_exit(const AIRCRAFT_STATE & ref_now, 
                            const AIRCRAFT_STATE & ref_last)
{
  // consider entry of start zone to be same as exit point
  bool exited = OrderedTaskPoint::transition_exit(ref_now, ref_last);
  if (exited) {
    clear_sample_all_but_last(ref_last);
    set_state_entered(ref_last);
  }
  return exited;
}


double
StartPoint::getElevation()
{
  // no need for safety height at start?
  return Elevation;
}


void 
StartPoint::set_neighbours(OrderedTaskPoint* prev,
                           OrderedTaskPoint* next)
{
  assert(prev==NULL);
  // should not ever have an inbound leg
  OrderedTaskPoint::set_neighbours(prev, next);
}


bool 
StartPoint::update_sample(const AIRCRAFT_STATE& state,
                          const TaskEvents &task_events)
{
  if (isInSector(state)) {
    if (!task_behaviour.check_start_speed(state)) {
      task_events.warning_start_speed();
    }
  }
  return OrderedTaskPoint::update_sample(state, task_events);
}
