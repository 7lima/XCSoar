/* Generated by Together */

#include "OrderedTaskPoint.hpp"
#include "Math/Earth.hpp"
#include <assert.h>
#include <math.h>
#include "GlideSolvers/GlideResult.hpp"
#include "GlideSolvers/GlidePolar.hpp"
#include "GlideSolvers/GlideState.hpp"


OrderedTaskPoint::OrderedTaskPoint(ObservationZonePoint* _oz,
                                   const TaskProjection& tp,
                                   const Waypoint & wp, 
                                   const TaskBehaviour &tb,
                                   const bool b_scored): 
  oz(_oz),
  ScoredTaskPoint(tp, wp, tb, b_scored),
  tp_previous(NULL),
  tp_next(NULL),
  active_state(NOTFOUND_ACTIVE),
  TaskLeg(*this)
{
}


OrderedTaskPoint* 
OrderedTaskPoint::get_previous() const
{
  return tp_previous;
}

OrderedTaskPoint* 
OrderedTaskPoint::get_next() const
{
  return tp_next;
}


void 
OrderedTaskPoint::set_neighbours(OrderedTaskPoint* prev,
                                 OrderedTaskPoint* next) 
{
  tp_previous = prev;
  tp_next = next;

  oz->set_legs(prev,this,next);

}

bool 
OrderedTaskPoint::scan_active(OrderedTaskPoint* atp) 
{
  // reset
  active_state = NOTFOUND_ACTIVE;

  if (atp == this) {
    active_state = CURRENT_ACTIVE;
  } else if (tp_previous 
             && ((get_previous()->getActiveState() 
                  == CURRENT_ACTIVE) 
                 || (get_previous()->getActiveState() 
                     == AFTER_ACTIVE))) {
    active_state = AFTER_ACTIVE;
  } else {
    active_state = BEFORE_ACTIVE;
  }

  if (tp_next) { 
    // propagate to remainder of task
    return get_next()->scan_active(atp);
  } else if (active_state == BEFORE_ACTIVE) {
    return false;
  } else {
    return true;
  }
}


const std::vector<SearchPoint>& 
OrderedTaskPoint::get_search_points()
{
  if (active_state== BEFORE_ACTIVE) {
    return SampledTaskPoint::get_search_points(true);
  } else if (active_state == CURRENT_ACTIVE) {
    return SampledTaskPoint::get_search_points(false);
  } else {
    return get_boundary_points();
  }
}


extern unsigned count_distbearing;


double 
OrderedTaskPoint::double_leg_distance(const GEOPOINT &ref) const
{
  assert(tp_previous);
  assert(tp_next);
  GEOPOINT p1 = get_previous()->get_reference_remaining();
  GEOPOINT p2 = get_next()->get_reference_remaining();
  count_distbearing++;
  return ::DoubleDistance(p1, ref, p2);
}



GlideResult 
OrderedTaskPoint::glide_solution_travelled(const AIRCRAFT_STATE &ac, 
                                          const GlidePolar &polar,
                                          const double minH) const
{
  GlideState gs(get_vector_travelled(),
                 std::max(minH,getElevation()),
                 ac);
  return polar.solve(gs);
}

GlideResult 
OrderedTaskPoint::glide_solution_planned(const AIRCRAFT_STATE &ac, 
                                        const GlidePolar &polar,
                                        const double minH) const
{
  GlideState gs(get_vector_planned(),
                 std::max(minH,getElevation()),
                 ac);
  return polar.solve(gs);
}

void
OrderedTaskPoint::update_oz()
{
  /// \todo also clear search points?
  update_geometry();
  clear_boundary_points();
  default_boundary_points();
  prune_boundary_points();
  update_projection();
}
