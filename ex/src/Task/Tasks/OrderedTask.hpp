/* Generated by Together */
#ifndef ORDEREDTASK_H
#define ORDEREDTASK_H

#include "AbstractTask.hpp"
#include "Task/TaskPoints/StartPoint.hpp"
#include "Task/TaskPoints/FinishPoint.hpp"
#include <vector>
#include "Util/Serialisable.hpp"
#include "GlideSolvers/MacCready.hpp"

class OrderedTaskPoint;

/**
 * A task comprising an ordered sequence of task points, each with
 * observation zones.  A valid OrderedTask has a StartPoint, zero or more
 * IntermediatePoints and a FinishPoint.
 *
 * \todo
 * - better handling of removal of start/finish point
 */
class OrderedTask:
  public AbstractTask,
  public Serialisable
{
public:
  /** 
   * Constructor.
   *
   * \todo
   * - default values in constructor
   * 
   * @param te Task events
   * @param tb Task behaviour
   * @param ta Task advance
   * @param gp Glide Polar
   * 
   * @return Initialised object
   */
  OrderedTask(const TaskEvents &te, 
              const TaskBehaviour &tb,
              TaskAdvance &ta,
              GlidePolar &gp);
  ~OrderedTask();

  /** 
   * Reset the task (as if never flown)
   * 
   */
  void reset();

/** 
 * Retrieves the active task point sequence.
 * 
 * @return Index of active task point sequence
 */
  TaskPoint* getActiveTaskPoint();

/** 
 * Set active task point index
 * 
 * @param desired Desired active index of task sequence
 */
  virtual void setActiveTaskPoint(unsigned desired);

/** 
 * Insert taskpoint before specified index in task.  May fail if the candidate
 * is the wrong type (e.g. if it is a StartPoint and the task already
 * has one).  
 * Ownership is transferred to this object.
 * 
 * @param tp Taskpoint to insert
 * @param position Index in task sequence, before which to insert
 * 
 * @return True on success
 */
  bool insert(OrderedTaskPoint* tp, const unsigned position);

/** 
 * Replace taskpoint.
 * May fail if the candidate is the wrong type.
 * Does nothing (but returns true) if replacement is equivalent
 * Ownership is transferred to this object.
 * 
 * @param tp Taskpoint to become replacement
 * @param position Index in task sequence of task point to replace
 * 
 * @return True on success
 */
  bool replace(OrderedTaskPoint* tp, const unsigned position);

/** 
 * Append taskpoint to end of task.  May fail if the candidate
 * is the wrong type (e.g. if it is a StartPoint and the task already
 * has one).
 * Ownership is transferred to this object.
 * 
 * @param tp Taskpoint to append to task
 * 
 * @return True on success
 */
  bool append(OrderedTaskPoint* tp);

/** 
 * Remove task point at specified position.  Note that
 * currently start/finish points can't be removed.
 * 
 * @param position Index in task sequence of task point to remove
 * 
 * @return True on success
 */
  bool remove(const unsigned position);

/** 
 * Check if task is valid.  Calls task_event methods on failure.
 * 
 * @return True if task is valid
 */
  bool check_task() const;

/** 
 * Update internal states when aircraft state advances.
 * 
 * @param state_now Aircraft state at this time step
 * @param full_update Force update due to task state change
 *
 * @return True if internal state changes
 */
  virtual bool update_sample(const AIRCRAFT_STATE &state_now, 
                             const bool full_update);


/** 
 * Update internal states (non-essential) for housework, or where functions are slow
 * and would cause loss to real-time performance.
 * 
 * @param state_now Aircraft state at this time step
 * 
 * @return True if internal state changed
 */
  virtual bool update_idle(const AIRCRAFT_STATE& state_now);

/** 
 * Return size of task
 * 
 * @return Number of task points in task
 */
  unsigned task_size() const {
    return tps.size();
  }

/** 
 * Retrieve vector of search points to be used in max/min distance
 * scans (by TaskDijkstra).
 * 
 * @param tp Index of task point of query
 * 
 * @return Vector of search point candidates
 */
  const SearchPointVector& get_tp_search_points(unsigned tp) const {
    return tps[tp]->get_search_points();
  }

/** 
 * Set task point's minimum distance value (by TaskDijkstra).
 * 
 * @param tp Index of task point to set min
 * @param sol Search point found to be minimum distance
 */
  void set_tp_search_min(unsigned tp, const SearchPoint &sol) {
    tps[tp]->set_search_min(sol);
  }

/** 
 * Set task point's maximum distance value (by TaskDijkstra).
 * 
 * @param tp Index of task point to set max
 * @param sol Search point found to be maximum distance
 */
  void set_tp_search_max(unsigned tp, const SearchPoint &sol) {
    tps[tp]->set_search_max(sol);
  }

/** 
 * Accessor for task projection, for use when creating task points
 * 
 * @return Task global projection
 */
  TaskProjection& get_task_projection() {
    return task_projection;
  }

protected:
/** 
 * Test whether (and how) transitioning into/out of task points should occur, typically
 * according to task_advance mechanism.  This also may call the task_event callbacks.
 * 
 * @param state_now Aircraft state at this time step
 * @param state_last Aircraft state at previous time step
 * 
 * @return True if transition occurred
 */
  virtual bool check_transitions(const AIRCRAFT_STATE &state_now, 
                                 const AIRCRAFT_STATE &state_last);

/** 
 * Calculate distance of nominal task (sum of distances from each
 * leg's consecutive reference point to reference point for entire task).
 * 
 * @return Distance (m) of nominal task
 */ 
  double scan_distance_nominal();

/** 
 * Calculate distance of planned task (sum of distances from each leg's
 * achieved/scored reference points respectively for prior task points,
 * and targets or reference points for active and later task points).
 * 
 * @return Distance (m) of planned task
 */
  double scan_distance_planned();

/** 
 * Calculate distance of planned task (sum of distances from aircraft to
 * current target/reference and for later task points from each leg's
 * targets or reference points).
 * 
 * @param ref Location of aircraft
 * 
 * @return Distance (m) remaining in the planned task
 */ 
  double scan_distance_remaining(const GEOPOINT &ref);

/** 
 * Calculate scored distance of achieved part of task.
 * 
 * @param ref Location of aircraft
 * 
 * @return Distance (m) achieved adjusted for scoring
 */
  double scan_distance_scored(const GEOPOINT &ref);

/** 
 * Calculate distance of achieved part of task.
 * For previous taskpoints, the sum of distances of maximum distance
 * points; for current, the distance from previous max distance point to
 * the aircraft.
 * 
 * @param ref Location of aircraft
 * 
 * @return Distance (m) achieved
 */
  double scan_distance_travelled(const GEOPOINT &ref);

/** 
 * Calculate maximum and minimum distances for task, achievable
 * from the current aircraft state (assuming active taskpoint does not retreat). 
 * 
 * @param ref Aircraft location
 * @param full Perform full search (if task state has changed)
 * @param dmin Minimum distance (m) achievable of task
 * @param dmax Maximum distance (m) achievable of task
 */
  void scan_distance_minmax(const GEOPOINT &ref, 
                            bool full,
                            double *dmin, double *dmax);

/** 
 * Calculate task start time.
 * 
 * @param state_now Aircraft state
 * 
 * @return Time (s) of start of task
 */
  virtual double scan_total_start_time(const AIRCRAFT_STATE &state_now);

/** 
 * Calculate leg start time.
 * 
 * @param state_now Aircraft state
 * 
 * @return Time (s) of start of leg
 */
  virtual double scan_leg_start_time(const AIRCRAFT_STATE &state_now);


/** 
 * Calculate glide result for remainder of task
 * 
 * @param state_now Aircraft state
 * @param total Glide result accumulated for total remaining task
 * @param leg Glide result for current leg of task
 */
  void glide_solution_remaining(const AIRCRAFT_STATE &state_now, 
                                GlideResult &total,
                                GlideResult &leg);

/** 
 * Calculate glide result from start of task to current state
 * 
 * @param state_now Aircraft state
 * @param total Glide result accumulated for total travelled task
 * @param leg Glide result for current leg of task
 */
  void glide_solution_travelled(const AIRCRAFT_STATE &state_now, 
                                GlideResult &total,
                                GlideResult &leg);

/** 
 * Calculate glide result from start of task to finish, and from this
 * calculate the effective position of the aircraft along the task based
 * on the remaining time.  This system therefore allows effective speeds
 * to be calculated which take into account the time value of height.
 * 
 * @param state_now Aircraft state
 * @param total Glide result accumulated for total task
 * @param leg Glide result for current leg of task
 * @param total_remaining_effective 
 * @param leg_remaining_effective 
 * @param total_t_elapsed Total planned task time (s)
 * @param leg_t_elapsed Leg planned task time (s)
 */
  void glide_solution_planned(const AIRCRAFT_STATE &state_now, 
                              GlideResult &total,
                              GlideResult &leg,
                              DistanceRemainingStat &total_remaining_effective,
                              DistanceRemainingStat &leg_remaining_effective,
                              const double total_t_elapsed,
                              const double leg_t_elapsed);

/** 
 * Calculate/search for best MC, being the highest MC value to produce a
 * pure glide solution for the remainder of the task.
 * 
 * @param state_now Aircraft state
 * 
 * @return Best MC value found (m/s)
 */
  double calc_mc_best(const AIRCRAFT_STATE &state_now);

/** 
 * Calculate virtual sink rate of aircraft that allows a pure glide solution
 * for the remainder of the task.  Glide is performed according to Mc theory
 * speed with the current glide polar, neglecting effect of virtual sink rate.
 * 
 * @param state_now Aircraft state
 * 
 * @return Sink rate of aircraft (m/s)
 */
  double calc_glide_required(const AIRCRAFT_STATE &state_now);

/** 
 * Calculate cruise efficiency for the travelled part of the task.
 * This is the ratio of the achieved inter-thermal cruise speed to that
 * predicted by MacCready theory with the current glide polar.
 * 
 * @param state_now Aircraft state
 * 
 * @return Cruise efficiency (0-1)
 */
  double calc_cruise_efficiency(const AIRCRAFT_STATE &state_now);

/** 
 * Optimise target ranges (for adjustable tasks) to produce an estimated
 * time remaining with the current glide polar equal to a target value.
 * This adjusts the target locations for the remainder of the task.
 * 
 * @param state_now Aircraft state
 * @param t_target Desired time for remainder of task (s)
 * 
 * @return Target range parameter (0-1)
 */
  double calc_min_target(const AIRCRAFT_STATE &state_now, 
                         const double t_target);

/** 
 * Calculate angle from aircraft to remainder of task (minimum of leg
 * heights above turnpoints divided by distance to go for each leg).  
 * 
 * @param state_now Aircraft state
 * 
 * @return Minimum gradient angle of remainder of task
 */
  virtual double calc_gradient(const AIRCRAFT_STATE &state_now);

private:
/** 
 * Sets previous/next taskpoint pointers for task point at specified
 * index in sequence.
 * 
 * @param position Index of task point
 */
  void set_neighbours(unsigned position);

/** 
 * Checks whether a new task point is suitable to add to the
 * task based on type of task point and whether task already
 * has a start/finish point.
 * 
 * @param new_tp Candidate task point to add
 * 
 * @return True if ok to add to task
 */
  bool check_startfinish(OrderedTaskPoint* new_tp); 

/** 
 * Update internal geometric state of task points. 
 * Typically called after task geometry or observation zones are modified.
 * 
 */
  void update_geometry();

  std::vector<OrderedTaskPoint*> tps;

  /**
   * @supplierCardinality 1 
   */
  StartPoint *ts;

  /**
   * @supplierCardinality 1 
   */
  FinishPoint *tf;

  TaskProjection task_projection;

public:

#ifdef DO_PRINT
  virtual void print(const AIRCRAFT_STATE &state);
#endif

  void Accept(TaskPointVisitor& visitor) const;
  DEFINE_VISITABLE()
};

#endif //ORDEREDTASK_H
