/* Generated by Together */

#include "StartPoint.hpp"
#include "Task/TaskEvents.hpp"
#include <assert.h>

StartPoint::StartPoint(ObservationZonePoint* _oz,
                       const TaskProjection& tp,
                       const Waypoint & wp,
                       const TaskBehaviour& tb) : 
  OrderedTaskPoint(_oz,tp,wp,tb), 
  enabled(true) 
{
}


double
StartPoint::get_elevation() const
{
  // no need for safety height at start?
  return m_elevation;
}


void 
StartPoint::set_neighbours(OrderedTaskPoint* prev,
                           OrderedTaskPoint* next)
{
  assert(prev==NULL);
  // should not ever have an inbound leg
  OrderedTaskPoint::set_neighbours(prev, next);
}


bool 
StartPoint::update_sample(const AIRCRAFT_STATE& state,
                          const TaskEvents &task_events)
{
  if (isInSector(state)) {
    if (!m_task_behaviour.check_start_speed(state)) {
      task_events.warning_start_speed();
    }
  }
  return OrderedTaskPoint::update_sample(state, task_events);
}


bool 
StartPoint::equals(const OrderedTaskPoint* other) const
{
  if (dynamic_cast<const StartPoint*>(other)) {
    return OrderedTaskPoint::equals(other);
  } else {
    return false;
  }
}
