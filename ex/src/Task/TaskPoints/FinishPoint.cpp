/* Generated by Together */

#include "FinishPoint.hpp"
#include <stdlib.h>
#include <assert.h>

bool 
FinishPoint::entry_precondition() const
{
  return get_previous()->has_entered();
}

double
FinishPoint::get_elevation() const
{
  return m_elevation+m_task_behaviour.safety_height_arrival;
}


void 
FinishPoint::set_neighbours(OrderedTaskPoint* prev,
                           OrderedTaskPoint* next)
{
  assert(next==NULL);
  // should not ever have an outbound leg
  OrderedTaskPoint::set_neighbours(prev, next);
}

bool 
FinishPoint::equals(const OrderedTaskPoint* other) const
{
  if (dynamic_cast<const FinishPoint*>(other)) {
    return OrderedTaskPoint::equals(other);
  } else {
    return false;
  }
}
