/* Generated by Together */

#ifndef ABORTTASK_H
#define ABORTTASK_H

#include "AbstractTask.h"
#include "Tasks/AbstractTask.h"
#include <vector>

class AbortTask : public AbstractTask 
{
public:
  AbortTask(const TaskEvents &te, 
            TaskAdvance &ta,
            GlidePolar &gp);
  ~AbortTask();

  std::vector<TaskPoint*> tps;

  TaskPoint* getActiveTaskPoint();
  void setActiveTaskPoint(unsigned index);

  virtual void report(const AIRCRAFT_STATE &location);

  virtual bool update_sample(const AIRCRAFT_STATE &, const bool full_update);
protected:
  virtual bool check_transitions(const AIRCRAFT_STATE &, const AIRCRAFT_STATE&);

};

#endif //ABORTTASK_H
