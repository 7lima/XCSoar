/* Generated by Together */

#include "Task.h"
#include "TaskDijkstra.hpp"
#include <stdio.h>

#include "TaskPoints/FAISectorStartPoint.hpp"
#include "TaskPoints/FAISectorASTPoint.hpp"
#include "TaskPoints/FAISectorFinishPoint.hpp"

Task::Task():
  activeTaskPoint(0)
{
  WAYPOINT wp[6];
  wp[0].Location.Longitude=0;
  wp[0].Location.Latitude=0;
  wp[1].Location.Longitude=0;
  wp[1].Location.Latitude=10;
  wp[2].Location.Longitude=10;
  wp[2].Location.Latitude=10;
  wp[3].Location.Longitude=10;
  wp[3].Location.Latitude=0;
  wp[4].Location.Longitude=20;
  wp[4].Location.Latitude=0;

  ts = new FAISectorStartPoint(wp[0]);
  tps.push_back(ts);
  tps.push_back(new FAISectorASTPoint(wp[1]));
  tps.push_back(new FAISectorASTPoint(wp[2]));
  tps.push_back(new FAISectorASTPoint(wp[3]));
  tps.push_back(new FAISectorFinishPoint(wp[4]));

  for (int i=0; i<tps.size()-1; i++) {
    legs.push_back(new TaskLeg(*tps[i],*tps[i+1]));
  }
  for (int i=0; i<tps.size(); i++) {
    tps[i]->update_geometry();
    tps[i]->default_search_points();
  }
}

Task::~Task()
{
// TODO: delete legs and turnpoints
}

void Task::scan_distance() 
{ 
  TaskDijkstra dijkstra(this);
  ScanTaskPoint start(0,0);

  double d;

  GEOPOINT me;
  me.Longitude=8;
  me.Latitude=8;

  ts->scan_active(getActiveTaskPoint());

  d= ts->scan_distance_nominal();
  printf("# dist nominal %g\n", d);

  d = ts->scan_distance_remaining(me);
  printf("# dist remaining %g\n", d);

  d = ts->scan_distance_travelled(me);
  printf("# dist travelled %g\n", d);

  d = ts->scan_distance_scored(me);
  printf("# dist scored %g\n", d);

  d = dijkstra.distance_opt(start,true);
  printf("# min dist %g\n",d);

  d = dijkstra.distance_opt(start,false);
  printf("# max dist %g\n",d);

  d = dijkstra.distance_opt_achieved(me, true);  
  printf("# min dist after achieving max %g\n",d);

  d = dijkstra.distance_opt_achieved(me, false);
  printf("# max dist after achieving max %g\n",d);
}

OrderedTaskPoint* Task::getActiveTaskPoint()
{
  return tps[activeTaskPoint];
}
 
unsigned Task::getActiveTaskPointIndex() 
{
  return activeTaskPoint;
}
