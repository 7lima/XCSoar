/* Generated by Together */

#include "SampledTaskPoint.h"
#include "ConvexHull/GrahamScan.hpp"
#include "ConvexHull/PolygonInterior.hpp"

bool SampledTaskPoint::prune_sample_points()
{
  bool changed=false;
  GrahamScan gs(sampled_points);
  sampled_points = gs.prune_interior(&changed);
  return changed;
}

bool SampledTaskPoint::prune_boundary_points()
{
  bool changed=false;
  GrahamScan gs(boundary_points);
  boundary_points = gs.prune_interior(&changed);
  return changed;
}

const std::vector<SEARCH_POINT>& 
SampledTaskPoint::get_boundary_points() const
{
  return boundary_points;
}

const std::vector<SEARCH_POINT>& 
SampledTaskPoint::get_search_points(bool cheat)
{
  if (cheat && !sampled_points.size()) {
    // this adds a point in case the waypoint was skipped
    // this is a crude way of handling the situation --- may be best
    // to de-rate the score in some way

    SEARCH_POINT sp;
    sp.Location = getLocation();
    sp.actual = false;
    sp.saved_rank = 0;
    sampled_points.push_back(sp);
  }
  if (sampled_points.size()>0) {
    return sampled_points;
  } else {
    return boundary_points;
  }
}


void SampledTaskPoint::default_boundary_points() { 
  double t=0;
  if (boundary_scored) {
    for (t=0; t<1.0; t+= 0.05) {
      SEARCH_POINT sp;
      sp.Location = get_boundary_parametric(t);
      sp.actual = false;
      sp.saved_rank = 0;
      boundary_points.push_back(sp);
    }
  } else {
    SEARCH_POINT sp;
    sp.Location = getLocation();
    sp.actual = false;
    sp.saved_rank = 0;
    boundary_points.push_back(sp);
  }
}

bool SampledTaskPoint::update_sample(const AIRCRAFT_STATE& state)
{
  if (isInSector(state)) {
    // if sample is inside sample polygon
    //   return false (no update required)
    // else
    //   add sample to polygon
    //   re-compute convex hull
    //   return true; (update required)
    //
    if (PolygonInterior(state.Location, sampled_points)) {
      // do nothing
      return false;
    } else {
      SEARCH_POINT sp;
      sp.Location = state.Location;
      sp.actual = true;
      sp.saved_rank = 0;
      sampled_points.push_back(sp);
      // only return true if hull changed 
      return (prune_sample_points());
    }
  }
  return false;
}
