/* Generated by Together */

#include "OrderedTaskPoint.hpp"
#include "TaskLeg.h"
#include <stdio.h>
#include <assert.h>
#include <math.h>


// -------

GEOPOINT OrderedTaskPoint::get_reference_travelled_origin()
{
  if (state_entered.Time>=0) {
    return getMaxLocation();
  } else {
    return getLocation();
  }
}

GEOPOINT OrderedTaskPoint::get_reference_travelled_destination()
{
  if (state_entered.Time>=0) {
    return getMaxLocation();
  } else {
    return getLocation();
  }
}

// -------

GEOPOINT OrderedTaskPoint::get_reference_scored_origin()
{
  return getLocation();
}

GEOPOINT OrderedTaskPoint::get_reference_scored_destination()
{
  return getLocation();
}

// -------

GEOPOINT OrderedTaskPoint::get_reference_nominal_origin()
{
  return getLocation();
}

GEOPOINT OrderedTaskPoint::get_reference_nominal_destination()
{
  return getLocation();
}

// -------

GEOPOINT OrderedTaskPoint::get_reference_remaining_origin()
{
  return getLocation();
}

GEOPOINT OrderedTaskPoint::get_reference_remaining_destination()
{
  // TODO: replace with target for AAT
  if (state_entered.Time>=0) {
    return getMinLocation();
  } else {
    return getLocation();
  }
}

// -------


TaskLeg* OrderedTaskPoint::get_leg_in() {
  return leg_in;
}

TaskLeg* OrderedTaskPoint::get_leg_out() {
  return leg_out;
}

void OrderedTaskPoint::set_leg_in(TaskLeg* the_leg)
{
  leg_in = the_leg;
}

void OrderedTaskPoint::set_leg_out(TaskLeg* the_leg) {
  leg_out = the_leg;
}

bool OrderedTaskPoint::scan_active(OrderedTaskPoint* atp) {
  // reset
  active_state = NOTFOUND_ACTIVE;

  if (atp == this) {
    active_state = CURRENT_ACTIVE;
  } else if (leg_in 
             && ((leg_in->get_origin()->getActiveState() 
                  == CURRENT_ACTIVE) 
                 || (leg_in->get_origin()->getActiveState() 
                     == AFTER_ACTIVE))) {
    active_state = AFTER_ACTIVE;
  } else {
    active_state = BEFORE_ACTIVE;
  }

  if (leg_out) { 
    // propagate to remainder of task
    return leg_out->get_destination()->scan_active(atp);
  } else if (active_state == BEFORE_ACTIVE) {
    return false;
  } else {
    return true;
  }
}

//////////


void OrderedTaskPoint::scan_bearing_remaining(const GEOPOINT &ref) 
{
  if (leg_out) {
    leg_out->get_destination()->scan_bearing_remaining(ref);
  } 
  if (leg_in) {
    bearing_remaining = leg_in->leg_bearing_remaining(ref);
  } else {
    bearing_remaining = 0.0;
  }
}

void OrderedTaskPoint::scan_bearing_travelled(const GEOPOINT &ref) 
{
  if (leg_out) {
    leg_out->get_destination()->scan_bearing_travelled(ref);
  } 
  if (leg_in) {
    bearing_travelled = leg_in->leg_bearing_travelled(ref);
  } else {
    bearing_travelled = 0.0;
  }
}


//////////////////

double OrderedTaskPoint::scan_distance_remaining(const GEOPOINT &ref) 
{
  // distance remaining from the given task point
  // (accumulates towards start)

  if (leg_in) {
    this_distance_remaining = leg_in->leg_distance_remaining(ref);
  } else {
    this_distance_remaining = 0.0;
  }

  if (leg_out) {
    double d = leg_out->leg_distance_remaining(ref);
    distance_remaining = 
      leg_out->get_destination()->scan_distance_remaining(ref)
      +d;
  } else {
    // finish, reset
    distance_remaining = 0.0;
  }
  return distance_remaining;
}


////

double OrderedTaskPoint::scan_distance_nominal() 
{
  // distance from start to the task point
  // (accumulates towards finish)

  if (!leg_in) {
    // start, reset
    distance_nominal = 0.0;
  }
  if (leg_out) {
    double d = leg_out->leg_distance_nominal();
    leg_out->get_destination()->distance_nominal = d+distance_nominal;
    return leg_out->get_destination()->scan_distance_nominal();
  } else {
    // return at end
    return distance_nominal;
  }
}

double OrderedTaskPoint::scan_distance_travelled(const GEOPOINT &ref) 
{

  if (leg_in) {
    this_distance_travelled = leg_in->leg_distance_travelled(ref);
  } else {
    this_distance_travelled = 0.0;
  }

  if (leg_in) {
    distance_travelled = leg_in->leg_distance_travelled(ref)
      +leg_in->get_origin()->distance_travelled;
  } else {
    distance_travelled = 0;
  }
  if (leg_out) {
    return leg_out->get_destination()->scan_distance_travelled(ref);
  } else {
    return distance_travelled;
  }
}


double OrderedTaskPoint::scan_distance_scored(const GEOPOINT &ref) 
{
  if (leg_in) {
    distance_scored = leg_in->leg_distance_scored(ref)
      +leg_in->get_origin()->distance_scored;
  } else {
    distance_scored = 0;
  }
  if (leg_out) {
    return leg_out->get_destination()->scan_distance_scored(ref);
  } else {
    return distance_scored;
  }
}


bool 
OrderedTaskPoint::transition_enter(const AIRCRAFT_STATE & ref_now, 
                                   const AIRCRAFT_STATE & ref_last)
{
  bool entered = ObservationZone::transition_enter(ref_now, ref_last);
  if (entered) {
    state_entered = ref_now;
    printf("entered at %g\n",ref_now.Time);
  }
  return entered;
}

bool 
OrderedTaskPoint::transition_exit(const AIRCRAFT_STATE & ref_now, 
                                  const AIRCRAFT_STATE & ref_last)
{
  bool exited = ObservationZone::transition_exit(ref_now, ref_last);
  if (exited) {
    state_exited = ref_last;
  }
  return exited;
}


void 
OrderedTaskPoint::print(std::ofstream& f)
{
  f << "# Bearing travelled " << bearing_travelled << "\n";
  f << "# Distance travelled " << this_distance_travelled << "\n";
  f << "# Bearing remaining " << bearing_remaining << "\n";
  f << "# Distance remaining " << this_distance_remaining << "\n";
  f << "# Entered " << state_entered.Time << "\n";
}

const std::vector<SEARCH_POINT>& 
OrderedTaskPoint::get_search_points()
{
  if (active_state== BEFORE_ACTIVE) {
    return SampledTaskPoint::get_search_points(true);
  } else if (active_state == CURRENT_ACTIVE) {
    return SampledTaskPoint::get_search_points(false);
  } else {
    return get_boundary_points();
  }
}
