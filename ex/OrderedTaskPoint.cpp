/* Generated by Together */

#include "OrderedTaskPoint.hpp"
#include "TaskLeg.h"
#include <stdio.h>

TaskLeg* OrderedTaskPoint::get_leg_in() {
  return leg_in;
}

TaskLeg* OrderedTaskPoint::get_leg_out() {
  return leg_out;
}

void OrderedTaskPoint::set_leg_in(TaskLeg* the_leg)
{
  leg_in = the_leg;
}

void OrderedTaskPoint::set_leg_out(TaskLeg* the_leg) {
  leg_out = the_leg;
}

bool OrderedTaskPoint::scan_active(OrderedTaskPoint* atp) {
  // reset
  active_state = NOTFOUND_ACTIVE;

  if (atp == this) {
    active_state = CURRENT_ACTIVE;
  } else if (leg_in 
             && ((leg_in->get_origin()->getActiveState() 
                  == CURRENT_ACTIVE) 
                 || (leg_in->get_origin()->getActiveState() 
                     == AFTER_ACTIVE))) {
    active_state = AFTER_ACTIVE;
  } else {
    active_state = BEFORE_ACTIVE;
  }

  if (leg_out) { 
    // propagate to remainder of task
    return leg_out->get_destination()->scan_active(atp);
  } else if (active_state == BEFORE_ACTIVE) {
    return false;
  } else {
    return true;
  }
}

//////////////////

double OrderedTaskPoint::scan_distance_remaining(const GEOPOINT &ref) 
{
  // distance remaining from the given task point
  // (accumulates towards start)

  if (leg_out) {
    double d = leg_out->leg_distance_remaining(ref);
    distance_remaining = 
      leg_out->get_destination()->scan_distance_remaining(ref)
      +d;
  } else {
    // finish, reset
    distance_remaining = 0.0;
  }
  return distance_remaining;
}


////

double OrderedTaskPoint::scan_distance_nominal() 
{
  // distance from start to the task point
  // (accumulates towards finish)

  if (!leg_in) {
    // start, reset
    distance_nominal = 0.0;
  }
  if (leg_out) {
    double d = leg_out->leg_distance_nominal();
    leg_out->get_destination()->
      set_distance_nominal(d+distance_nominal);
    return leg_out->get_destination()->scan_distance_nominal();
  } else {
    // return at end
    return distance_nominal;
  }
}

double OrderedTaskPoint::scan_distance_travelled(const GEOPOINT &ref) 
{
  if (leg_in) {
    distance_travelled = leg_in->leg_distance_travelled(ref)
      +leg_in->get_origin()->distance_travelled;
  } else {
    distance_travelled = 0;
  }
  if (leg_out) {
    return leg_out->get_destination()->scan_distance_travelled(ref);
  } else {
    return distance_travelled;
  }
}


double OrderedTaskPoint::scan_distance_scored(const GEOPOINT &ref) 
{
  if (leg_in) {
    distance_scored = leg_in->leg_distance_scored(ref)
      +leg_in->get_origin()->distance_scored;
  } else {
    distance_scored = 0;
  }
  if (leg_out) {
    return leg_out->get_destination()->scan_distance_scored(ref);
  } else {
    return distance_scored;
  }
}
